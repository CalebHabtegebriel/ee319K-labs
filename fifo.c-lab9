// Lab9.c
// Runs on LM4F120 or TM4C123
// Student names: change this to your names or look very silly
// Last modification date: change this to the last modification date or look very silly
// Last Modified: 9/2/2019

// Analog Input connected to P22=ADC0 channel 5
// displays on Sitronox ST7735
// PF3, PF2, PF1 are heartbeats
// This U0Rx PC4 (in) is connected to other LaunchPad PC5 (out)
// This U0Tx PC5 (out) is connected to other LaunchPad PC4 (in)
// This ground is connected to other LaunchPad ground
// * Start with where you left off in Lab8. 
// * Get Lab8 code working in this project.
// * Understand what parts of your main have to move into the UART1_Handler ISR
// * Rewrite the SysTickHandler
// * Implement the s/w Fifo on the receiver end 
//    (we suggest implementing and testing this first)
// Lab 9 will not run in the simulator

#include <stdint.h>

#include "ST7735.h"
#include "PLL.h"
#include "ADC.h"
#include "print.h"
#include "../inc/tm4c123gh6pm.h"
#include "UART1.h"
#include "FiFo.h"

//*****the first three main programs are for debugging *****
// main1 tests just the ADC and slide pot, use debugger to see data
// main2 adds the LCD to the ADC and slide pot, ADC data is on Nokia
// main3 adds your convert function, position data is no Nokia

void DisableInterrupts(void); // Disable interrupts
void EnableInterrupts(void);  // Enable interrupts

#define PF1       (*((volatile uint32_t *)0x40025008))
#define PF2       (*((volatile uint32_t *)0x40025010))
#define PF3       (*((volatile uint32_t *)0x40025020))
uint32_t Data;      // 12-bit ADC
uint32_t Position;  // 32-bit fixed-point 0.01 cm
int32_t TxCounter = 0; 

// Initialize Port F so PF1, PF2 and PF3 are heartbeats
void PortF_Init(void){
// Intialize PortF for hearbeat
unsigned long volatile delay;
	SYSCTL_RCGCGPIO_R |= 0x00000020;				
	while((SYSCTL_PRGPIO_R&0x20) == 0){};
	GPIO_PORTF_AMSEL_R &= ~0x00;     
	GPIO_PORTF_PCTL_R &= ~0xFF;
	GPIO_PORTF_DIR_R |= 0x0E;				
	GPIO_PORTF_AFSEL_R &= ~0x0E;   
	GPIO_PORTF_DEN_R |= 0x0E;    
	}




uint32_t Status[20];  // entries 0,7,12,19 should be false, others true
char GetData[10];  // entries 1 2 3 4 5 6 7 8 should be 1 2 3 4 5 6 7 8
int main(void){ // Make this main to test FiFo
  Fifo_Init();   // Assuming a buffer of size 6
  for(;;){
    Status[0]  = Fifo_Get(&GetData[0]);  // should fail,    empty
    Status[1]  = Fifo_Put(1);            // should succeed, 1 
    Status[2]  = Fifo_Put(2);            // should succeed, 1 2
    Status[3]  = Fifo_Put(3);            // should succeed, 1 2 3
    Status[4]  = Fifo_Put(4);            // should succeed, 1 2 3 4
    Status[5]  = Fifo_Put(5);            // should succeed, 1 2 3 4 5
    Status[6]  = Fifo_Put(6);            // should succeed, 1 2 3 4 5 6
    Status[7]  = Fifo_Put(7);            // should fail,    1 2 3 4 5 6 
    Status[8]  = Fifo_Get(&GetData[1]);  // should succeed, 2 3 4 5 6
    Status[9]  = Fifo_Get(&GetData[2]);  // should succeed, 3 4 5 6
    Status[10] = Fifo_Put(7);            // should succeed, 3 4 5 6 7
    Status[11] = Fifo_Put(8);            // should succeed, 3 4 5 6 7 8
    Status[12] = Fifo_Put(9);            // should fail,    3 4 5 6 7 8 
    Status[13] = Fifo_Get(&GetData[3]);  // should succeed, 4 5 6 7 8
    Status[14] = Fifo_Get(&GetData[4]);  // should succeed, 5 6 7 8
    Status[15] = Fifo_Get(&GetData[5]);  // should succeed, 6 7 8
    Status[16] = Fifo_Get(&GetData[6]);  // should succeed, 7 8
    Status[17] = Fifo_Get(&GetData[7]);  // should succeed, 8
    Status[18] = Fifo_Get(&GetData[8]);  // should succeed, empty
    Status[19] = Fifo_Get(&GetData[9]);  // should fail,    empty
  }
}

// Get fit from excel and code the convert routine with the constants
// from the curve-fit
uint32_t Convert(uint32_t input){
		input = ((56*(input))+27891)/128;
		return input;
}



// final main program for bidirectional communication
// Sender sends using SysTick Interrupt
// Receiver receives using RX

void SysTick_Init(uint32_t period){
	NVIC_ST_CTRL_R = 0;
	NVIC_ST_RELOAD_R = period -1;
	NVIC_ST_CURRENT_R = 0;
	NVIC_SYS_PRI3_R = (NVIC_SYS_PRI3_R & 0x00FFFFFF) | 0x20000000;\
	NVIC_ST_CTRL_R = 0x0007;

}
char data1;
int position;
int main1(void){ 
	int delay;
  DisableInterrupts(); // complete initialization first
  PLL_Init(Bus80MHz);     // Bus clock is 80 MHz 
  ST7735_InitR(INITR_REDTAB);
  ADC_Init();    // initialize to sample ADC
	delay=0x5000;
	while(delay){
		delay--;
	}
  PortF_Init();
	 delay=0x5000;
	while(delay){
		delay--;
	}
  UART1_Init();       // initialize UART
	 delay=0x5000;
	while(delay){
		delay--;
	}
  ST7735_SetCursor(0,0);
  LCD_OutFix(0);
  ST7735_OutString(" cm");
//Enable SysTick Interrupt by calling SysTick_Init()
  EnableInterrupts();
  while(1){
    //--UUU--Complete this  - see lab manual
		ST7735_SetCursor(0,0);
		Fifo_Get(&data1);// obtain a value
		if(data1==0x02){
//			ST7735_FillScreen(0);
		ST7735_SetCursor(0,0);
		Fifo_Get(&data1);
		ST7735_OutChar(data1);		//dig1
		Fifo_Get(&data1);
		ST7735_OutChar(data1);		//"."
		Fifo_Get(&data1);
		ST7735_OutChar(data1);		//dig2
		Fifo_Get(&data1);
		ST7735_OutChar(data1);		//dig3
		Fifo_Get(&data1);
		ST7735_OutChar(data1);	
		ST7735_OutString("      cm");
		Fifo_Get(&data1);
		ST7735_SetCursor(0,1);
		ST7735_OutString("                 ");
		Fifo_Init();	
		}
}
}


/* SysTick ISR
*/
void SysTick_Handler(void){ // every 20 ms
 //Sample ADC, convert to distance, create 8-byte message, send message out UART1
	GPIO_PORTF_DATA_R ^= 0x02;
	int num1, num2;
	Data = ADC_In();
	Data = Convert(Data);
	GPIO_PORTF_DATA_R ^= 0x02;
	UART1_OutChar(0x02);
	num1 = Data/1000;
	num2 = num1 + 0x30;
	UART1_OutChar(num2);
	UART1_OutChar(0x2E);
	Data = Data - (num1 * 1000);
	num1 = Data/100;
	num2 = num1 + 0x30;
	UART1_OutChar(num2);
	Data = Data - (num1 * 100);
	num1 = Data/10;
	num2 = Data + 0x30;
	UART1_OutChar(num2);
	Data = Data - (num1*10);
	num2 = num1 + 0x30;
	UART1_OutChar(num2);
	UART1_OutChar(0x0D);
	UART1_OutChar(0x03);
	TxCounter ++;
	GPIO_PORTF_DATA_R ^= 0x02; 

	}

